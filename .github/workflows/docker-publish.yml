name: Publication Docker

# D√©clenche la CI sur push de tags et sur la branche main
on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Permet de d√©clencher manuellement

env:
  # Nom de l'image
  IMAGE_NAME: divnum-discord-bot
  # Registres Docker
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  GHCR_REGISTRY: ghcr.io

jobs:
  # Job de build et test
  build-and-test:
    name: Build et Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üì¶ Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üìö Installation des d√©pendances
        run: npm ci

      - name: üîç V√©rification du formatage
        run: npm run format:check

      - name: üîé Lint du code
        run: npm run lint

      - name: üîß V√©rification des types TypeScript
        run: npm run type-check

      - name: üèóÔ∏è Build de l'application
        run: npm run build

      - name: üì§ Upload des artefacts de build
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job de publication Docker
  docker-publish:
    name: Publication Image Docker
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üîê Configuration de QEMU
        uses: docker/setup-qemu-action@v3

      - name: üîß Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üìù Extraction des m√©tadonn√©es Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üîë Connexion √† GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üîë Connexion √† Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && secrets.DOCKER_HUB_TOKEN != ''
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: üê≥ Build et Push de l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}


      - name: üìä Affichage des informations de l'image
        run: |
          echo "### üê≥ Images Docker Publi√©es" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags cr√©√©s :**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digests :**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job optionnel: Scan de s√©curit√©
  security-scan:
    name: Scan de S√©curit√©
    needs: docker-publish
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üîç Scan de vuln√©rabilit√©s avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: üì§ Upload des r√©sultats vers GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: üîç Scan de vuln√©rabilit√©s (rapport console)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'  # Ne pas √©chouer sur les vuln√©rabilit√©s
          severity: 'CRITICAL,HIGH'




