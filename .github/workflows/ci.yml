name: CI - Intégration Continue

# Workflow de CI pour vérifier le code sur chaque push et PR
on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  # Job de vérification de la qualité du code
  code-quality:
    name: Qualité du Code
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 📦 Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Installation des dépendances
        run: npm ci

      - name: 🔍 Vérification du formatage (Prettier)
        run: npm run format:check

      - name: 🔎 Lint du code (ESLint)
        run: npm run lint

      - name: 🔧 Vérification des types TypeScript
        run: npm run type-check

      - name: 📊 Rapport de qualité
        if: always()
        run: |
          echo "### 📊 Rapport de Qualité du Code" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Formatage vérifié" >> $GITHUB_STEP_SUMMARY
          echo "✅ Lint vérifié" >> $GITHUB_STEP_SUMMARY
          echo "✅ Types TypeScript vérifiés" >> $GITHUB_STEP_SUMMARY

  # Job de build
  build:
    name: Build de l'Application
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 📦 Configuration de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📚 Installation des dépendances
        run: npm ci

      - name: 🏗️ Build de l'application
        run: npm run build

      - name: 📊 Vérification de la taille du build
        run: |
          BUILD_SIZE=$(du -sh dist | cut -f1)
          echo "### 📦 Build Réussi" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Taille du build :** $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js :** 20.x" >> $GITHUB_STEP_SUMMARY
          echo "**TypeScript :** $(npx tsc --version)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload des artefacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package*.json
          retention-days: 7

  # Job de test Docker
  docker-test:
    name: Test Image Docker
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build de l'image Docker (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test de l'image Docker
        run: |
          # Créer un fichier .env de test
          cat > .env.test << EOF
          DISCORD_TOKEN=test_token_for_build
          DISCORD_CLIENT_ID=test_client_id
          NODE_ENV=production
          EOF
          
          # Tester que le conteneur démarre
          docker run --rm --env-file .env.test ${{ env.IMAGE_NAME }}:test node --version || true
          
          echo "### 🐳 Image Docker Testée" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build réussi" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image fonctionnelle" >> $GITHUB_STEP_SUMMARY

  # Job de notification
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build, docker-test]
    if: always()
    
    steps:
      - name: 📊 Résumé du Pipeline
        run: |
          echo "### 🎉 Pipeline CI Terminé" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branche :** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit :** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auteur :** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Statut des jobs :**" >> $GITHUB_STEP_SUMMARY
          echo "- Qualité du code : ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build : ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker test : ${{ needs.docker-test.result }}" >> $GITHUB_STEP_SUMMARY




